<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        * {
            scroll-behavior: smooth;
            -webkit-user-drag: none;
            -webkit-user-select: none;
            user-select: none;
            margin: 0px 0px;
        }

        html {
            font-size: 62.5%;
            margin: 0 0;
        }

        #container {
            height: 100vh;
            width: 100vw;
            margin: 0 0;
            background-color: rgba(126, 143, 153, 0.941);
            z-index: 100;
            background-image: url("/images/conve-removebg-preview.png");
            background-repeat: no-repeat;
            background-position: center;
            background-size: 13vw 100vh;
        }

        body {
            overflow: hidden;
        }

        /* #container::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url("./conve-removebg-preview.png");
        background-repeat: no-repeat;
        background-size: contain;
        background-position: center;
        transform: rotate(
          45deg
        ); /* Rotate the background image by 45 degrees }*/

        .button-div {
            position: absolute;
            top: 5rem;
            text-align: center;
            display: flex;
            gap: 2rem;
            justify-content: center;
            align-items: center;
            border: 3px solid rgba(0, 0, 0, 0.717);
            border-radius: 10px;
            /* z-index: 100; */
        }

        button {
            background-color: transparent;
            border: 2px solid hsla(223, 90%, 49%, 0.863);
            border-radius: 10px;
            padding: 10px;
            outline: none;
            text-transform: uppercase;
            font-weight: bold;
            margin: 20px;
        }

        button:hover {
            background-color: hsla(0, 0%, 100%, 0.769);
            border: 2px solid hsla(223, 90%, 49%, 0.708);
            color: hsla(223, 90%, 49%, 0.863);
        }

        .colorScheme {
            position: absolute;
            top: 1vh;
            right: 3vw;
            scale: 0.8;
            box-shadow: 5px 5px 10px hsla(60, 6%, 19%, 0.772),
                10px 10px 10px hsla(60, 6%, 19%, 0.772);
            border-radius: 4rem;
            -webkit-user-drag: none;
            transition: all 0.2s ease-in-out;
            visibility: visible;
        }

        .colorScheme:hover {
            scale: 0.9;
        }

        circle.waste {
            position: absolute;
            /* z-index: 1000; */
        }

        /* #frame{
        position: absolute;
        background-color: transparent;
        height: 100%;
        width: 100%;
        z-index:1011 ;
      } */
        .image-container1 {
            display: flex;
            flex-direction: column;
            position: absolute;
            top: 38vh;
            gap: 4vw;
            left: 32vw;
            visibility: visible;
        }

        .image-container2 {
            display: flex;
            flex-direction: column;
            position: absolute;
            top: 38dvh;
            gap: 4vw;
            right: 30vw;
            visibility: visible;
        }

        .box1,
        .box2,
        .box3,
        .box4,
        .box5,
        .box6 {
            -webkit-user-drag: none;
        }
        .names1,.names2{
            font-size: 2.2rem;
            font-weight: bolder;
            text-shadow: -1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black;
            color: rgb(255, 255, 255);
            display: flex;
            flex-direction: column;
            gap: 18vh;
        }
        .names1{
            position: absolute;
            top: 46vh;
            left: 34.5vw;
        }
        .names2{
            position: absolute;
            top: 46vh;
            right:31vw
        }

    </style>
    <title>D3.js</title>
</head>

<body>
    <div class="parent">
        <svg id="container"></svg>

        <img class="colorScheme" src="/images/color_scheme.png" alt="ColorScheme" />


      </div> 
        <div class="image-container1">
            <img class="box1" src="/images/box-removebg-preview.png" alt="Box" height="120rem" width="120rem" />
            <img class="box2" src="/images/box-removebg-preview.png" alt="Box" height="120rem" width="120rem" />
            <img class="box3" src="/images/box-removebg-preview.png" alt="Box" height="120rem" width="120rem" />
        </div>
        <div class="image-container2">
            <img class="box4" src="/images/box-removebg-preview.png" alt="Box" height="120rem" width="120rem" />
            <img class="box5" src="/images/box-removebg-preview.png" alt="Box" height="120rem" width="120rem" />
            <img class="box6" src="/images/box-removebg-preview.png" alt="Box" height="120rem" width="120rem" />
        </div>
        <div class="names1">
            <span>Wet</span>
            <span>Metal</span>
            <span>Plastic</span>
        </div>
        <div class="names2">
            <span>Wood</span>
            <span>Paper</span>
            <span>E-waste</span>
        </div>
    </div>

    <script>

        const svg = d3.select("#container");

        const wasteNum = 50;
        const startTime = performance.now();
        const range = d3.range(wasteNum);
        const wasteTypes = ["wet", "metal", "paper", "plastic", "wood", "ewaste"];

        const random_waste =range.map(() => {
            return wasteTypes[Math.floor(Math.random() * wasteTypes.length)];
        });
   
//Logic for adding data to the database depending upon its type
async function addWasteFromArray(array){
    
const random_waste = array



for (let index = 0; index < random_waste.length; index++) {

if(random_waste[index]==="metal"){
await fetch("http://localhost:5000/addWaste", {
       method: "POST",
       headers: {
        "Content-Type": "application/json",
       },
       body: JSON.stringify({ type: 2 }),
 })
}

if(random_waste[index]==="ewaste"){
await fetch("http://localhost:5000/addWaste", {
       method: "POST",
       headers: {
        "Content-Type": "application/json",
       },
       body: JSON.stringify({ type: 6 }),
 })
}

if(random_waste[index]==="plastic"){
await fetch("http://localhost:5000/addWaste", {
       method: "POST",
       headers: {
        "Content-Type": "application/json",
       },
       body: JSON.stringify({ type: 4 }),
 })
}
if(random_waste[index]==="wet"){
 await fetch("http://localhost:5000/addWaste", {
       method: "POST",
       headers: {
        "Content-Type": "application/json",
       },
       body: JSON.stringify({ type: 1 }),
 })
}
if(random_waste[index]==="paper"){
await fetch("http://localhost:5000/addWaste", {
       method: "POST",
       headers: {
        "Content-Type": "application/json",
       },
       body: JSON.stringify({ type: 3 }),
 })
}

 

if(random_waste[index]==="wood"){
await fetch("http://localhost:5000/addWaste", {
       method: "POST",
       headers: {
        "Content-Type": "application/json",
       },
       body: JSON.stringify({ type: 5 }),
 })
}
}

 

}


addWasteFromArray(random_waste);

        function switchColor(d) {
            switch (d) {
                case "wet":
                    return "#4AC9E3";
                case "metal":
                    return "#A9A9A9";
                case "plastic":
                    return "#FF5733";
                case "wood":
                    return "#8B4513";
                case "paper":
                    return "#F5F5F5";
                case "ewaste":
                    return "#6EEB83";

            }
        }

        const animation_time = 1000; //3 seconds --- 1seconds
        const top_animation_time = range.map((d) => {               //upto 300s
            return Math.floor(Math.random() * 60 * animation_time);
        }); 
        console.log("Delay at top: ",top_animation_time);


        const waste = svg
            .selectAll(".waste")
            .data(random_waste)
            .enter()
            .append("circle")

            .attr("class", "waste")
            .attr("cx", 0.5 * window.innerWidth)         //790  //.attr("cx", (d)=>{ return Math.floor(Math.random()*window.innerWidth)})
            .attr("cy", 0)           
            .attr("r", 10)
            .attr("fill",(d)=>switchColor(d))

            .transition()

            .duration((d, i) => { return top_animation_time[i] }) //0-300seconds [or 3000ms :) ] range  ---CAN BE REGULAR INTERVAL WITH [animation_time becomes time for whole completion]  
            //(d,i)=>{ return (i*animation_time)}          --- w/o data storage capability (d)=>{ return Math.floor(Math.random()*100*animation_time)}                               
            .attr("cy", 0.01 * window.innerHeight)
            .ease(d3.easeLinear)                                         //ADDS DELAY AND RANDOMNESS TO THE FLOW OF WASTE.(another state is provided above)

            
            .transition() //upto the boxes
            .duration(3000)

            .attr("cy", (d)=>{
                switch (d) {
                    case "wet": return 0.46 * window.innerHeight;
                    case "wood": return 0.46 * window.innerHeight;
                    case "metal": return 0.65 * window.innerHeight;
                    case "paper": return 0.65 * window.innerHeight;
                    case "plastic": return 0.86 * window.innerHeight;
                    case "ewaste": return 0.86 * window.innerHeight;
                }
            })
            .ease(d3.easeLinear)

    

            .transition()                                                //# SEGREGATING #                                           
            .duration(2000)                             //2000 can be stored in a var to manipulate for different inputs
            .attr("cx", (d) => {                          //"wet", "metal", "paper", "plastic", "wood"
                switch (d) {
                    case "wet": return  0.35 * window.innerWidth;
                    case "wood": return 0.65 * window.innerWidth;
                    case "metal": return 0.35 * window.innerWidth;
                    case "paper": return 0.65 * window.innerWidth;
                    case "plastic": return 0.35 * window.innerWidth;
                    case "ewaste": return   0.65 * window.innerWidth;
                }
            })
            .ease(d3.easeExp)


    const maxDelay = Math.max(...top_animation_time);
    console.log("Maximum delay at top: ", maxDelay ," at index ", top_animation_time.indexOf(maxDelay));

        const interval_time = 10000;

        function logElapsedTime() {
            let currentTime = performance.now(); // Get the current time
            let elapsedTime = currentTime - startTime; // Calculate elapsed time
            console.log("Elapsed time:", elapsedTime.toFixed(2), "milliseconds"); // Log elapsed time
            if (elapsedTime >= maxDelay + 1* interval_time)
                clearInterval(intervalId); //checking time passed with the last time (adding a value for better margin)
        }

        // Call logElapsedTime function
        const intervalId = setInterval(logElapsedTime, interval_time);
        
        svg
            .selectAll(".waste")
            .on("mouseover", handleMouseOver)
            .on("mouseout", handleMouseOut);

        function handleMouseOver(event, d) {
            // handle mouseout event
            // Select the hovered element and update its text or class based on data
            d3.select(this).attr("fill", "red");
            console.log("Mouseover on element with data: ", d); //logs data in the console

            svg
                .append("text") //TEXT PART IS HERE...........................
                .attr("x", d3.select(this).attr("cx")) // Adjust position based on the hovered element's coordinates
                .attr("y", d3.select(this).attr("cy") - 10) // Adjust position based on the hovered element's coordinates
                .text(d) // Set text content to the data associated with the hovered element
                .attr("fill", "black")// Set text color
                .style("font-size", "20px")
        }
        // handle mouseout event
        function handleMouseOut(event, d) {
            // Revert the changes made during mouseover
            d3.select(this).text("").attr("fill", switchColor); //changing back the color to specifed one

            svg.selectAll("text").remove();
        }











        // function UptoBox(wasteType) {
        //     switch (wasteType) {
        //         case "wet":
        //             return 0.45 * window.innerHeight;
        //         case "metal":
        //             return 0.65 * window.innerHeight;
        //         case "plastic":
        //             return 0.85 * window.innerHeight;
        //         case "wood":
        //             return 0.5 * window.innerHeight;
        //         case "paper":
        //             return 0.75 * window.innerHeight;
        //     }
        // }

        // function MoveInBox(wasteType) {
        //     switch (wasteType) {
        //         case "wet":
        //             return 0.35 * window.innerWidth;
        //         case "metal":
        //             return 0.35 * window.innerWidth;
        //         case "plastic":
        //             return 0.35 * window.innerWidth;
        //         case "wood":
        //             return 0.65 * window.innerWidth;
        //         case "paper":
        //             return 0.65 * window.innerWidth;
        //     }
        // }







        // const twov2 = svg
        //     .append("circle")
        //     .attr("cx", 0.56 * window.innerWidth)
        //     .attr("cy", 0.5 * window.innerHeight)
        //     .attr("r", 10)
        //     .attr("fill", "red")

        // const twov1 = svg
        //     .append("circle")
        //     .attr("cx", 0.44 * window.innerWidth)
        //     .attr("cy", 0.5 * window.innerHeight)
        //     .attr("r", 10)
        //     .attr("fill", "red");
        // const lv1 = svg
        //     .append("circle")
        //     .attr("cx", 0.44 * window.innerWidth)
        //     .attr("cy", 10)
        //     .attr("r", 10)
        //     .attr("fill", "red");
        // const lvtwo = svg
        //     .append("circle")
        //     .attr("cx", 0.56 * window.innerWidth)
        //     .attr("cy",10)
        //     .attr("r", 10)
        //     .attr("fill", "red");

            const entrance = svg                 //required
                .append("rect")
                .attr("x", 0.423 * window.innerWidth)
                .attr("y", 0)
                .attr("width", 0.15 * window.innerWidth)
                .attr("height", 0.05 * window.innerHeight)
                .attr("fill", "black")



    </script>
</body>

</html>