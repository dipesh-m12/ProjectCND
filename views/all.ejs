<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <div id="toast-container"></div>
  </head>
  <body>
    <h1>Total Waste Storage Facility</h1>
    <div class="body">
      <div>
        <div class="info">
          <h1>Live Waste Type Capacity Status</h1>
        </div>
      </div>
      <div class="container"></div>
    </div>
  </body>
  <script>
    function showToast(message, duration = 3000, color) {
      const toastContainer = document.getElementById("toast-container");
      const toast = document.createElement("div");

      toast.className = "toast";
      toast.innerHTML = message;
      toast.style.background = color;

      toastContainer.appendChild(toast);
      setTimeout(() => {
        toast.classList.add("show");
        setTimeout(() => {
          toast.classList.remove("show");
          setTimeout(() => {
            toast.remove();
          }, 500);
        }, duration);
      }, 100);
    }

    let classNames = [
      "background-color: green",
      "background-color: grey",
      "background-color: white",
      "background-color:yellow",
      "background-color: silver",
      "background-color: red",
    ];
    let wasteName = ["Wet", "Metal", "Paper", "Plastic", "Glass", "E-waste"];
    let infoElement;
    let capacity = 100;
    const type = [1, 2, 3, 4, 5, 6];
    let count = 0;
    let totalCapacity = 0;
    let totalCount = 0;

    for (let i = 0; i < type.length; i++) {
      fetch("http://localhost:5000/data", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ type: type[i] }),
      })
        .then((response) => response.json()) // Parse the response as JSON
        .then((data) => {
          console.log(data);
          count = data.count;
          console.log(count);
          capacity = data.capacity;

          console.log(capacity);
          totalCapacity = totalCapacity + capacity;
          totalCount = totalCount + count;

          for (j = 0; j < count; j++) {
            const newElement = document.createElement("p");
            newElement.style = classNames[i];
            newElement.textContent = wasteName[i];
            document.querySelector(".container").appendChild(newElement);
          }
          if (i == type.length - 1) {
            infoElement = document.createElement("span");
            infoElement.textContent = `TOTAL BLOCKS = ${totalCount}`;
            document.querySelector(".info").appendChild(infoElement);

            statusElement = document.createElement("span");
            statusElement.textContent = `TOTAL CAPACITY = ${totalCapacity}`;
            document.querySelector(".info").appendChild(statusElement);

            percentElement = document.createElement("span");
            percentElement.textContent = `PERCENTAGE FILLED = ${Math.round(
              (totalCount / totalCapacity) * 100
            )}%`;
            document.querySelector(".info").appendChild(percentElement);
          }
        })
        .catch((error) => console.error(error));
    }
    showToast("Exceeded Limit for waste Storage!",5000,"linear-gradient(45deg, #FF5733, #FF0000)")
    showToast("More than 60% filled! Action Required",7000,"linear-gradient(45deg, #FF5733, #FF0000)")
  </script>
  <style>
    html {
      overflow-y: hidden;
    }

    h1 {
      text-align: center;
      background-color: black;
      color: antiquewhite;
      font-family: sans-serif;
      font-size: 56px;
      font-weight: bold;
      padding: 10px;
    }
    .body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 80vh;
      margin: 0;
      background-color: antiquewhite;
    }

    .container {
      border: 5px solid black;
      padding: 5px;
      height: 60vh;
      width: 70vw;
      display: flex;
      flex-direction: column-reverse;
      align-content: start;
      flex-wrap: wrap;
      overflow: auto;
      background-color: aliceblue;
    }

    .container::-webkit-scrollbar {
      width: 2px;
    }

    .container::-webkit-scrollbar-track {
      width: 9px;
      height: 5px;
      box-shadow: inset 1px 1px 1px #ffffff;
    }

    .container::-webkit-scrollbar-thumb {
      background: linear-gradient(45deg, #222222, 40%, #888888);
      border-radius: 0.2rem;
    }

    .container p {
      display: flex;

      height: 50px;
      width: 50px;
      border: 5px black solid;
      margin: 5px;
      background-color: red;
      color: #222222;
      font-family: sans-serif;
      font-size: medium;
      align-items: center;
      text-align: center;
      align-content: center;
      justify-content: center;
    }
    .info {
      text-align: center;
      display: flex;
      flex-direction: column;
      margin: 10px;
      padding: 5px;
      border: 5px solid black;
      flex-wrap: wrap;
      background-color: aliceblue;
    }
    .info h1 {
      margin: 5px;
      padding: 5px;
      font-family: sans-serif;
      font-size: xx-large;
    }
    .info span {
      margin: 5px;
      padding: 0;
      font-family: sans-serif;
      font-size: larger;
      font-weight: bold;
    }
    button {
      padding: 10px;
      margin: 5px;
      width: 250px;
      font-family: sans-serif;
      font-size: larger;
      align-self: center;
      text-align: center;
      background-color: black;
      color: antiquewhite;
      font-weight: bold;
      cursor: pointer;
    }
    .button {
      display: flex;
      justify-content: center;
    }
    #toast-container {
      position: fixed;
      bottom: 20px;
      left: 0%;
      z-index: 1000;
    }

    .toast {
      width: fit-content;
      display: none;
      padding: 10px 20px;
      border-radius: 5px;
      background: #08ff2d;
      color: #fff;
      font-size: 1.2rem;
      font-weight: bold;
      box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);
      margin-bottom: 10px;
      opacity: 0;
      transform: translateX(-10rem);
      z-index: 4000;
    }

    .toast.show {
      display: block;
      opacity: 1;
      transform: translateX(0rem);
    }
  </style>
</html>
